#include "Rabbit.h"
#include "CollisionManager.h"
#include "SimplifyImGui.h"

Rabbit::Rabbit(void)
{
    CollisionManager::GetInstance()->Register(&sphereCollider_);
    CollisionManager::GetInstance()->Register(&detectPlayerCollider_);

    sphereCollider_.SetID("rabbit");
    detectPlayerCollider_.SetID("rabbit_detectPlayer");

    sphereCollider_.SetOnCollision(std::bind(&Rabbit::OnCollision, this));
    detectPlayerCollider_.SetOnCollision(std::bind(&Rabbit::OnDetectPlayer, this));

    sphereCollider_.radius = kRadius_;
    detectPlayerCollider_.radius = kDetectRadius_;

    coordinate_.SetPosition({ 0,60,20 }); // 初期位置
    coordinate_.SetAxisForward({ 0,0,1 });
    coordinate_.SetAxisRight({ 1,0,0 });
    coordinate_.SetAxisUp({ 0,1,0 });
    coordinate_.SetIsPriority(false);

    appearance_->GetCoordinatePtr()->SetPosition(coordinate_.GetPosition());
    appearance_->GetCoordinatePtr()->SetAxisForward(coordinate_.GetForwardVec());
    appearance_->GetCoordinatePtr()->SetAxisRight(coordinate_.GetRightVec());
    appearance_->GetCoordinatePtr()->SetAxisUp(coordinate_.GetUpVec());
    appearance_->GetCoordinatePtr()->SetIsPriority(false);
}

void Rabbit::Update(void)
{
    // 1Frame遅い描画座標等更新 ** 座標が確定した後に、当たり判定処理で座標を補正するため、1Frame遅らせないとガクつく可能性がある。
    appearance_->GetCoordinatePtr()->SetAxisUp(coordinate_.GetUpVec().Normalize());
    appearance_->GetCoordinatePtr()->SetAxisForward(coordinate_.GetForwardVec().Normalize());
    appearance_->GetCoordinatePtr()->SetAxisRight(coordinate_.GetRightVec().Normalize());
    appearance_->GetCoordinatePtr()->SetPosition(coordinate_.GetPosition());
    appearance_->Update();

    static float sDetectRadius{ kDetectRadius_ };
    GUI::Begin("Rabbit");
    ImGui::SliderFloat("detectRadius", &sDetectRadius, 0.f, 200.f);
    GUI::End();

    // 移動量
    Vector3 moveVec{};
    Vector3 velocity{};
    Move(moveVec, velocity); // 参照渡しで受け取る。

    // 座標更新
    Vector3 currentPos = coordinate_.GetPosition();
    currentPos += velocity;
    coordinate_.SetPosition(currentPos);

    // コライダー更新
    sphereCollider_.center = coordinate_.GetPosition();
    detectPlayerCollider_.center = coordinate_.GetPosition();

    // 球面のどの位置にいるかに応じて、正しい姿勢にするために3軸を再計算
    Vector3 rightFromOldAxis = Math::Vec3::Cross(coordinate_.GetUpVec().Normalize(), coordinate_.GetForwardVec().Normalize()); // 右ベクトル：(更新された上ベクトル x 古い正面ベクトル)
    coordinate_.SetAxisRight(rightFromOldAxis.Normalize());
    Vector3 forwardFromOldAxis = Math::Vec3::Cross(coordinate_.GetRightVec().Normalize(), coordinate_.GetUpVec().Normalize()); // 正面ベクトル：(更新された右ベクトル x 更新された上ベクトル)
    coordinate_.SetAxisForward(forwardFromOldAxis.Normalize());

    // 移動入力があった場合
    if (moveVec.IsNonZero())
    {
        // 移動方向を向くような、移動方向に合わせた姿勢にするために右向きベクトルを再計算
        Vector3 upFromAxis = coordinate_.GetUpVec(); // 上ベクトル：(更新された上ベクトルを取得）
        Vector3 rightFromMoveVec = Math::Vec3::Cross(upFromAxis.Normalize(), moveVec.Normalize()); // 右ベクトル：(更新された上ベクトル x 移動ベクトル（移動方向 ≒ 正面ベクトル))
        coordinate_.SetAxisRight(rightFromMoveVec.Normalize());
        coordinate_.SetAxisForward(moveVec.Normalize());
    }

    coordinate_.Update();
}

void Rabbit::Draw(void)
{
    // 赤色のテクスチャを適用。（クソ見辛い）
    appearance_->Draw("Resources/red1x1.png");
    // デフォルト表示（対応するテクスチャがそもそもないので、MissingTextureに置き換わる。めっちゃlog出る。）
    //appearance_->Draw(/*"Resources/red1x1.png"*/);
}

void Rabbit::Move(Vector3& moveVec, Vector3& velocity)
{
    // 移動ベクトル
    //moveVec += pForwardFromCamera * inputVec.y; // 入力ベクトルに応じて加算
    //moveVec += redefinitionPRightFromCamera * inputVec.x;

    // プレイヤから兎方向へのベクトルをそのまま移動ベクトルとして起用する（仮）
    moveVec = (coordinate_.GetPosition() - pPos_).Normalize();

    // 重力
    jumpVecNorm_ -= kGravity_;

    // ジャンプベクトル
    Vector3 jumpVec{};
    jumpVec += coordinate_.GetUpVec().Normalize() * jumpVecNorm_;

    // 移動量
    velocity += moveVec.Normalize() * kMoveSpeed_;
    velocity += jumpVec;
}

void Rabbit::OnCollision(void)
{
    if (sphereCollider_.GetColInfo().id == "gravityArea")
    {
        // 球状重力エリア内に入ってる場合に行う処理。
        Vector3 center2PlayerVec = sphereCollider_.center - sphereCollider_.GetColInfo().v;
        coordinate_.SetAxisUp(center2PlayerVec.Normalize());
    }
    if (sphereCollider_.GetColInfo().id == "terrainSurface")
    {
        //isGrounded_ = true;
        //jumpVec_ = { 0,0,0 };
        jumpVecNorm_ = 0.f;

        // めり込み距離を出す (めり込んでいる想定 - 距離）なので結果はマイナス想定？？
        float diff = Vector3(sphereCollider_.center - sphereCollider_.GetColInfo().v).Length() - (sphereCollider_.GetColInfo().f + sphereCollider_.radius);

        Vector3 currentPos = coordinate_.GetPosition();
        //currentPos += player->body_->coordinate_.GetUpVec().ExtractVector3();

        // 正規化された球からプレイヤーまでのベクトル * めり込み距離
        currentPos += coordinate_.GetUpVec().Normalize() * -diff; // ここをマイナス符号で値反転

        coordinate_.SetPosition(currentPos);
    }
}

void Rabbit::OnDetectPlayer(void)
{
    if (detectPlayerCollider_.GetColInfo().id == "player")
    {
        // 検知したプレイヤの座標を記録する。
        pPos_ = detectPlayerCollider_.GetColInfo().v;
    }
}
